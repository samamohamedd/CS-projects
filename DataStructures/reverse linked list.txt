-temp2 = second node refrence
-change the 1st node pointer to null
-temp = head(عشان منضيعش الhead)
-head = temp2(second node)
and repeat

all while head is not None
temp2:next
temp:prev

1 --> 2 --> 3 --> none
curr = head(1)
prev = none

nex_node = curr.next(2)(3)
curr.next = prev(1-->none)(2-->1)
prev = curr (1)
curr = next_node (2)

3 --> 2 --> 1 --> none


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        prev = None
        curr = head

        while curr:
            next_node = curr.next
            curr.next = prev
            prev = curr
            curr = next_node
        return prev
            

        




